Index: master.cfg
===================================================================
--- master.cfg	(revision 151042)
+++ master.cfg	(working copy)
@@ -19,17 +19,17 @@
 # (where /opt/local shouldn't be messed with) and the production server (where
 # it has to be)
 
-production   = False
+production   = True
 privkey      = ''
 slaveport    = 9989
 httpport     = 8010
-buildboturl  = "http://localhost:8010/"
+buildboturl  = "https://build-test.macports.org/"
 htpasswdfile = "htpasswd"
 mpbbsvnurl   = "https://svn.macports.org/repository/macports/contrib/mp-buildbot"
 svnurl       = "https://svn.macports.org/repository/macports/trunk"
-archivesite  = "https://packages.macports.org"
+archivesite  = "https://packages-test.macports.org"
 slaveprefix  = "/opt/local"
-toolsprefix  = "/opt/mports"
+toolsprefix  = "/opt/bblocal"
 
 if os.path.exists(_path('config.json')):
     with open(_path('config.json')) as f:
@@ -77,7 +77,8 @@
 # poller is used for local testing but PBChangeSource (which relies on
 # notifications from a post-commit script) should be used in production
 
-if production:
+#if production:
+if False:
     # TODO
     from buildbot.changes.pb import PBChangeSource
     sourcedata = []
@@ -88,8 +89,7 @@
     from buildbot.changes.svnpoller import SVNPoller
     c['change_source'] = (SVNPoller(
         svnurl='https://svn.macports.org/repository/macports/trunk',
-        #'https://svn.macports.org/repository/macports/trunk',
-        #svnbin='/opt/local/bin/svn',
+        svnbin=toolsprefix+'/bin/svn',
         pollinterval=300,
         category='macports',
         project='ports'))
@@ -185,7 +185,8 @@
 #   repourl=Interpolate('https://svn.macports.org/repository/macports/%(src::branch:-trunk)s/base'),
 base_factory.addStep(SVN(
     repourl='https://svn.macports.org/repository/macports/trunk/base',
-    method="copy"))
+    method="copy",
+    env={"PATH": toolsprefix + "/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"}))
 base_factory.addStep(Configure(command=WithProperties("""
 env PATH=/usr/bin:/bin:/usr/sbin:/sbin ./configure --enable-readline \
     --prefix=%(workdir)s/opt/local \
@@ -241,8 +242,8 @@
 # because archives must be built with prefix=/opt/local
 if production:
     prefix='/opt/local'
-    dlhost='packages@packages-origin.macports.org'
-    dlpath='/var/www/html/packages'
+    dlhost='packages@packages-test.macports.org'
+    dlpath='@PREFIX@/var/rsync/macports/packages-test'
 else:
     prefix=slaveprefix
     dlhost=''
@@ -287,6 +288,7 @@
     # get mp-buildbot; we'll do the checkout of base and dports via these scripts
     portwatcher_factory.addStep(SVN(
         repourl=mpbbsvnurl,
+        env={"PATH": toolsprefix + "/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"},
         alwaysUseLatest=True,
         preferLastChangedRev=True,
         mode="incremental",
@@ -360,11 +362,7 @@
 portbuilder_factory = BuildFactory()
 portbuilder_factory.workdir = '../build'
 
-# XXX: use InfoStep instead of running a dummy command
-portbuilder_factory.addStep(ShellCommand(
-    command=["/usr/bin/true"],
-    description=[WithProperties("Port: %(portname)s")]))
-#portbuilder_factory.addStep(InfoStep(title=WithProperties("Port %(portname)s")))
+portbuilder_factory.addStep(InfoStep(title=Interpolate("Port: %(prop:portname)s")))
 
 portbuilder_factory.addStep(Compile(
     command=['./mpbb/mpbb', 'install-dependencies', '--prefix', WithProperties(prefix), '--port', WithProperties('%(portname)s')],
@@ -391,13 +389,13 @@
 
 # XXX: move deploy_archives.sh functionality to mp-buildbot
 # sign generated binaries and sync to download server (if distributable)
-#if production:
-#    portbuilder_factory.addStep(MasterShellCommand(command=["./deploy_archives.sh", WithProperties(ulpath_unique)],
-#                                       name="deploy archives",
-#                                       description="deploy archives",
-#                          env={'PRIVKEY': privkey,
-#                               'DLHOST': dlhost,
-#                               'DLPATH': dlpath}))
+if production:
+    portbuilder_factory.addStep(MasterShellCommand(command=["./deploy_archives.sh", util.Property("ulpath_unique")],
+                                       name="deploy archives",
+                                       description="deploy archives",
+                          env={'PRIVKEY': privkey,
+                               'DLHOST': dlhost,
+                               'DLPATH': dlpath}))
 
 # TODO: do we want to upload the individual logs so maintainers can review them?
 #ports_factory.addStep(ShellCommand(command="./cleanup_old.sh",
@@ -471,7 +469,8 @@
     cancelPendingBuild = 'auth',
 )
 
-if production:
+#if production:
+if False:
     # send mail about base failures to users on the blamelist
     from buildbot.status.mail import MailNotifier
     mn = MailNotifier(
