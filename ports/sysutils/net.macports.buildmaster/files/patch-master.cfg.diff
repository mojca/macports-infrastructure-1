Index: master.cfg
===================================================================
--- master.cfg	(revision 151105)
+++ master.cfg	(working copy)
@@ -19,17 +19,17 @@
 # (where /opt/local shouldn't be messed with) and the production server (where
 # it has to be)
 
-production   = False
+production   = True
 privkey      = ''
 slaveport    = 9989
 httpport     = 8010
-buildboturl  = "http://localhost:8010/"
+buildboturl  = "https://build-test.macports.org/"
 htpasswdfile = "htpasswd"
 mpbbsvnurl   = "https://svn.macports.org/repository/macports/contrib/mp-buildbot"
 svnurl       = "https://svn.macports.org/repository/macports/trunk"
-archivesite  = "https://packages.macports.org"
+archivesite  = "https://packages-test.macports.org"
 slaveprefix  = "/opt/local"
-toolsprefix  = "/opt/mports"
+toolsprefix  = "/opt/bblocal"
 
 if os.path.exists(_path('config.json')):
     with open(_path('config.json')) as f:
@@ -77,7 +77,8 @@
 # poller is used for local testing but PBChangeSource (which relies on
 # notifications from a post-commit script) should be used in production
 
-if production:
+#if production:
+if False:
     # TODO
     from buildbot.changes.pb import PBChangeSource
     sourcedata = []
@@ -88,8 +89,7 @@
     from buildbot.changes.svnpoller import SVNPoller
     c['change_source'] = (SVNPoller(
         svnurl='https://svn.macports.org/repository/macports/trunk',
-        #'https://svn.macports.org/repository/macports/trunk',
-        #svnbin='/opt/local/bin/svn',
+        svnbin='@PREFIX@/bin/svn',
         pollinterval=300,
         category='macports',
         project='ports'))
@@ -198,21 +198,21 @@
 base_factory.addStep(ShellCommand(
     command="make install",
     name="install",
-    description="install"))
+    description=["installing"],
+    descriptionDone=["install"]))
 base_factory.addStep(ShellCommand(
     command="make test",
     name="test",
-    description="test"))
+    description=["testing"],
+    descriptionDone=["test"]))
 base_factory.addStep(ShellCommand(
     command=WithProperties("make distclean; rm -rf %(workdir)s/opt/local"),
     name="clean",
-    description="clean"))
+    description=["cleaning"],
+    description=["clean"]))
 
 # custom class to make the file list available on the slave...
 class SetPropertyFromCommandWithPortlist(SetPropertyFromCommand):
-    name = 'generate portlist'
-    description = 'generate portlist'
-
     def setBuild(self, build):
         SetPropertyFromCommand.setBuild(self, build)
 
@@ -242,8 +242,8 @@
 # because archives must be built with prefix=/opt/local
 if production:
     prefix='/opt/local'
-    dlhost='packages@packages-origin.macports.org'
-    dlpath='/var/www/html/packages'
+    dlhost=''
+    dlpath='@PREFIX@/var/rsync/macports/packages-test'
 else:
     prefix=slaveprefix
     dlhost=''
@@ -298,14 +298,16 @@
     portwatcher_factory.addStep(ShellCommand(
         command=['./mpbb/mpbb', 'selfupdate', '--prefix', WithProperties(prefix)],
         name="selfupdate",
-        description="selfupdate",
+        description=["updating", "MacPorts"],
+        descriptionDone=["update", "MacPorts"],
         haltOnFailure=True))
 
     portwatcher_factory.addStep(ShellCommand(
         command=['./mpbb/mpbb', 'checkout', '--prefix', WithProperties(prefix), '--svn-url', svnurl],
         timeout=3600,
         name="checkout",
-        description="checkout",
+        description=["syncing", "ports"],
+        description=["sync", "ports"],
         haltOnFailure=True))
 
     def extract_subportlist(rc, stdout, stderr):
@@ -329,7 +331,7 @@
         command=WithProperties('./mpbb/mpbb list-subports %(fullportlist)s'),
         extract_fn=extract_subportlist,
         name="subports",
-        description="subports"))
+        description=["listing", "subports"]))
 
     portwatcher_factory.addStep(TriggerWithPortlist(
         schedulerNames=[triggerable],
@@ -371,22 +373,22 @@
 portbuilder_factory.addStep(Compile(
     command=['./mpbb/mpbb', 'install-dependencies', '--prefix', WithProperties(prefix), '--port', WithProperties('%(portname)s')],
     name="install-dependencies",
-    description="installing deps",
-    descriptionDone="install deps",
+    description=["installing", "dependencies"],
+    descriptionDone=["install", "dependencies"],
     haltOnFailure=True))
 
 portbuilder_factory.addStep(Compile(
     command=['./mpbb/mpbb', 'install-port', '--prefix', WithProperties(prefix), '--port', WithProperties('%(portname)s')],
     name="install-port",
-    description="installing port",
-    descriptionDone="install port",
+    description=["installing", "port"],
+    descriptionDone=["install", "port"],
     haltOnFailure=True))
 
 portbuilder_factory.addStep(ShellCommand(
     command=['./mpbb/mpbb', 'gather-archives', '--prefix', WithProperties(prefix), '--port', WithProperties('%(portname)s'), '--archive-site', archivesite, '--staging-dir', ulpath],
     name="gather-archives",
-    description="gathering archives",
-    descriptionDone="gather archives",
+    description=["gathering", "archives"],
+    descriptionDone=["gather", "archives"],
     haltOnFailure=True))
 
 # upload archives from build slave to master
@@ -394,14 +396,6 @@
     slavesrc=ulpath,
     masterdest=WithProperties(ulpath_unique)))
 
-portbuilder_factory.addStep(ShellCommand(
-    command=['./mpbb/mpbb', 'cleanup', '--prefix', WithProperties(prefix), '--port', WithProperties('%(portname)s')],
-    name="cleanup",
-    description="cleaning up",
-    descriptionDone="clean up",
-    alwaysRun=True))
-
-
 # XXX: move deploy_archives.sh functionality to mp-buildbot
 # sign generated binaries and sync to download server (if distributable)
 if production:
@@ -414,11 +408,12 @@
                                'DLPATH': dlpath}))
 
 # TODO: do we want to upload the individual logs so maintainers can review them?
-#ports_factory.addStep(ShellCommand(command="./cleanup_old.sh",
-#                                   name="cleanup",
-#                                   description="cleanup",
-#                                   env={'PREFIX': WithProperties(prefix),
-#                                        'ULPATH': ulpath}))
+portbuilder_factory.addStep(ShellCommand(
+    command=['./mpbb/mpbb', 'cleanup', '--prefix', WithProperties(prefix), '--port', WithProperties('%(portname)s')],
+    name="cleanup",
+    description=["cleaning"],
+    descriptionDone=["clean"],
+    alwaysRun=True))
 
 # === BUILDER CONFIGURATION ===
 
@@ -488,7 +483,8 @@
     cancelPendingBuild = 'auth',
 )
 
-if production:
+#if production:
+if False:
     # send mail about base failures to users on the blamelist
     from buildbot.status.mail import MailNotifier
     mn = MailNotifier(
